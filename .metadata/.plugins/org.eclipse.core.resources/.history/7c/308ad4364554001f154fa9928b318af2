#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct student{
	int id;
	char name[50];
	int age;
	float gpa;
};

struct node {
	struct student data;
	struct node *next;
};

struct node *head = NULL ;  //empty list

// insert node function

void insert_student(struct student s){
	struct node *temp = (struct node *)malloc(sizeof(struct node));
	temp->data=s;
	temp->next=NULL;
	if (head == NULL){
		head=temp;
	}
	else{
		temp->next=head;
		head=temp;
	}

}

void display_all_students(void){
	struct node *current = head;
	if(current == NULL){
		printf("no students added yet\n");
		return;
	}
	int i =1;
	while(current != NULL){

		printf("%d. {name: %s,id: %d,age: %d, GPA: %f}\n",
				i,current->data.name,current->data.id,current->data.age,current->data.gpa);
		i++;
		current = current->next;
	}

}

void search_using_id(void){
	if(head==NULL){
		printf("no students added yet\n");
		return;
	}
	int wanted_id;
	printf("enter wanted id:");
	scanf("%d",&wanted_id);
	struct node *current = head;
	int i=1; //works as a boolean variable
	while(current != NULL){
		if(current->data.id == wanted_id){
			printf("%d. {name: %s,id: %d,age: %d, GPA: %f}\n",
					wanted_id,current->data.name,current->data.id,current->data.age,current->data.gpa);
			i=0;
		}
		current = current->next;
	}
	if(i){
		printf("no student found with this id\n");
	}
}


void update_student_information(void){
	if(head == NULL){
		printf("no students added yet\n");
		return;
	}
	int wanted_id;
	printf("enter student id:\n");
	scanf("%d",&wanted_id);
	struct node *current = head;
	int found=0;//works as flag
	while(current != NULL){
		if(current->data.id == wanted_id){
			printf("Enter new name:\n");
			scanf("%49s",current->data.name);
			printf("Enter age:\n");
			scanf("%d",&current->data.age);
			printf("Enter GPA:\n");
			scanf("%f",&current->data.gpa);
			found = 1;

		}
		current = current->next;
	}
	if(!found){
		printf("no students with this id\n");
	}
	else{
		printf("data updated succesfully");
	}
}

void delete_a_student(){
	if(head == NULL){
		printf("no students added yet\n");
		return;
	}
	struct node *current = head, *prev = head;
	int wanted_id;
	printf("enter student id:\n");
	scanf("%d",&wanted_id);
	if(current->data.id == wanted_id){
		head = current->next;
		free(current);
		return;
	}
	current = head->next; //to make the current infront of the prev
	while(current != NULL){
		if(current->data.id == wanted_id){
				prev->next = current->next;
				free(current);
				break;
			}
		prev = current;
		current = current->next;
	}



}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int main(void)  {
	setvbuf(stdout, NULL, _IONBF, 0);
	setvbuf(stderr, NULL, _IONBF, 0);

	// to loop untill the user wants to exit the program
	int exit=1;
	while(exit){
		//print the choices

		printf("----------------------------------------\n");//horizontal for readability
		printf("1.Add a Student\n");
		printf("2.Display All Students\n");
		printf("3.Search for a Student by ID\n");
		printf("4.Update Student Information\n");
		printf("5.Delete a Student\n");
		printf("6.Calculate Average GPA\n");
		printf("7.Find Student with Highest GPA\n");
		printf("8.Exit\n");
		printf("----------------------------------------\n");//horizontal for readability

		//to make the user input his choice
		int choice;
		scanf("%d",&choice);



		switch (choice){
		case 1:{
			struct student s1;

			//take the struct as input from the user

			printf("Enter id:\n");
			scanf("%d",&s1.id);

			//check if id already exist
			struct node *current = head;
			while(current != NULL){
				if(s1.id == current->data.id){

					printf("this id is already taken please choose another id\n");

					printf("Enter id:\n");//to restart the switch case 1
					scanf("%d",&s1.id);
				}
				current = current->next;
			}

			printf("Enter name:\n");
			scanf("%49s",s1.name);
			printf("Enter age:\n");
			scanf("%d",&s1.age);
			printf("Enter GPA:\n");
			scanf("%f",&s1.gpa);

			//pass it to the function
			insert_student(s1);
		}
		break;
		case 2:
			display_all_students();
			break;
		case 3:
			search_using_id();
			break;
		case 4:
			update_student_information();
			break;
		case 5:
			delete_a_student();
			break;
		case 6:
			break;
		case 7:
			break;
		case 8:
			exit = 0;
			break;
		default:
			printf("wrong input please choose a correct operation number ");

		}
	}
}
